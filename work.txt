N/W leader

1) Generate Sn
2) Announce Hash - Sn  (Broadcast)
3) Announce Vin Cert   (Broadcast)
4) Accept Join request (P2P)
5) Send Sn as soon as we receive join (P2P)


------------------------------------


N/W member
1) Listen for Hash of Sn
2) Listen for Vin Cert
3) Send join - as soon as we get Hash of Sn
4) Listen for (Send Sn) - we may need to wait here till Vin cert is received

------------------------------------
MESSAGE-SERVER

IMP *****
1) In Consumer code - Need to call Ping
2) TODO: check if exchange is being used during clean up. qserver/server.go line: 137

-------------------------------------

Messages

2B000 -> Announce Sn
2B100 -> Announce Vin Cert
2B200 -> Join
2B300 -> Send Sn
2B400 -> Start Rekey
2B500 -> Send nonce

-------------------------------------

Steps: Member ECU

1) As soon as it starts (gets connected to message-server), it sends {start_rekey}
2) It then sends it's {nonce||hash(Sn)}.
3) Waits to receive - {announce Sn}
    a) If it times out after a while
        It has correct Sv
    b) If it receives {Announce_Sn},
        Sends {join} for network formation

    Consumers:
        1) Consumer listening for {announce_sn}
        2) Consumer listening for {announce_vin_cert}
        3) Direct exchange for sending and receving messages from Leader
    Producers:
        1) Broadcast {start_rekey}
        2) Broadcast {nonce}

Steps: Leader ECU

------------------------------------
Queues 

1) P2P
    a) Join Queue
    b) Send Sn Queue
    c) Simple Message Queue -- other messages

2) Broadcast
    a) AnnounceSn Queue
    b) Announce Hash(Sn) Queue
    c) Rekey Queue
    d) Nonce Queue

-------------------------------------
Broadcast
    1) For Publish:
        a) Declare exchange
        b) Publish on that exchange
    2) For Subscribe:
        a) Declare exchange
        b) Declare Queue
        c) Bind Queue
        d) Consume
    Exchange name should be same, when declaring exchange


P2P
    1) For send:
        a) Declare Queue
        b) Publish
    2) For Receive:
        a) Declare Queue
        b) Receive
    Need to share same queue name
-------------------------------------


ISSUE :
1) NotifyReturns :- add - now system just panics. (need to add when failure to publish message)


-------------------------------------
TODO:

1) On invoking client.NewPublisher -> it creates a new connection
Find way to work on same connection.

2) When calling Publish -> it re-declares exchange, q, blah ....
Skip all these steps and just call the publish method on qclient.

-------------------------------------

Tasks:

Leader

DONE:
    1) Define announceSn
    2) Define announceVin
    3) Listen and Handle Join
    4) Send Sn


TODO:
    1) Need to add logic to trigger announceVin routine
    2) Provision to receive all Nonces. Need to decide on dealine for wait time.
    3) Create Sv

Member

    1) Listen for announceSn
    2) Listen for Vin certs
    4) Send Join
        As soon as announce Sn is received
    5) Listen for Sn
        Verify that certificates are also received.
        Wait till timeout for certificates
    6) Send Rekey - as soon as node is up
    7) Send Nonce
    8) Provision to receive all Nonces. Need to decide on dealine for wait time.
    9) Create Sv


General

TODO:
    1) Find way to set VIN in domain
    
DONE:
    1) Clear nonceAll for member ecu when it receives annonceSn or rekey
    2) Clear nonceAll for leader when it receives rekey

Doubts:
    1) What to do when we receive announce Vin ( {nl_nonce||nl_cert} )
    2) Which certs are we sending during announceVin call
    3) Which certs are we sending when sending join request


---------------------------------------------------------------------
                TODO ****
1) Handle Rekey case - received by member. Need to add RekeySubscriber in member.config